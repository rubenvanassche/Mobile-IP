#include <iostream>
#include <string>

std::string encrypt(std::string msg, std::string key)
{
    // Make sure the key is at least as long as the message
    std::string tmp(key);
    while (key.size() < msg.size())
        key += tmp;
    
    // And now for the encryption part
    for (std::string::size_type i = 0; i < msg.size(); ++i)
        msg[i] ^= key[i];
    return msg;
}

const std::string mn("AddressInfo@1 :: AddressInfo(mobile_node_address 192.168.2.1/24 tap0:eth); AddressInfo@2 :: AddressInfo(home_agent_private_address 192.168.2.254/24 tap1:eth); AddressInfo@3 :: AddressInfo(home_agent_public_address 192.168.0.2/24 tap2:eth); AddressInfo@4 :: AddressInfo(corresponding_node_address 192.168.0.1/24 tap3:eth); AddressInfo@5 :: AddressInfo(foreign_agent_public_address 192.168.0.3/24 tap4:eth); AddressInfo@6 :: AddressInfo(foreign_agent_private_address 192.168.3.254/24 tap5:eth); FromHost@8 :: FromHost(tap0); ToHost@9 :: ToHost(tap0); ICMPPingResponder@10 :: ICMPPingResponder; EtherEncap@11 :: EtherEncap(0x0800, mobile_node_address:eth, mobile_node_address:eth); mobile_node/mip_class :: IPClassifier(icmp type 9, src udp port 434, -); mobile_node/ip :: Strip(14); mobile_node/CheckIPHeader@3 :: CheckIPHeader; mobile_node/rt :: LinearIPLookup(    mobile_node_address:ip/32 0,    mobile_node_address:ipnet 1,    0.0.0.0/0 home_agent_private_address 1); mobile_node/ipgw :: IPGWOptions(mobile_node_address); mobile_node/FixIPSrc@6 :: FixIPSrc(mobile_node_address); mobile_node/ttl :: DecIPTTL; mobile_node/frag :: IPFragmenter(1500); mobile_node/arpq :: ARPQuerier(mobile_node_address); mobile_node/ICMPError@10 :: ICMPError(mobile_node_address, parameterproblem); mobile_node/ICMPError@11 :: ICMPError(mobile_node_address, timeexceeded); mobile_node/ICMPError@12 :: ICMPError(mobile_node_address, unreachable, needfrag); mobile_node/HostEtherFilter@13 :: HostEtherFilter(mobile_node_address); mobile_node/in_cl :: Classifier(12/0806 20/0001, 12/0806 20/0002, 12/0800); mobile_node/arp_res :: ARPResponder(mobile_node_address); mobile_node/tee :: Tee(2); mobile_node/AgentSolicitationSender@17 :: AgentSolicitationSender; mobile_node/IPEncap@18 :: IPEncap(PROTO icmp, SRC mobile_node_address, DST 255.255.255.255, TTL 1); mobile_node/EtherEncap@19 :: EtherEncap(0x0800, mobile_node_address, ff:ff:ff:ff:ff:ff); mobile_node/mobile_node :: MobileNode(mobile_node_address, home_agent_private_address, home_agent_public_address, rt, arpq); mobile_node/CheckUDPHeader@21 :: CheckUDPHeader; mobile_node/mip_class [2] -> mobile_node/rt     -> ICMPPingResponder@10     -> EtherEncap@11     -> mobile_node/HostEtherFilter@13     -> mobile_node/in_cl     -> mobile_node/arp_res     -> ToHost@9; mobile_node/rt [1] -> mobile_node/ipgw     -> mobile_node/FixIPSrc@6     -> mobile_node/ttl     -> mobile_node/frag     -> mobile_node/arpq     -> ToHost@9; mobile_node/ipgw [1] -> mobile_node/ICMPError@10     -> ToHost@9; mobile_node/ttl [1] -> mobile_node/ICMPError@11     -> ToHost@9; mobile_node/frag [1] -> mobile_node/ICMPError@12     -> ToHost@9; mobile_node/in_cl [1] -> [1] mobile_node/arpq; mobile_node/in_cl [2] -> mobile_node/ip     -> mobile_node/CheckIPHeader@3     -> mobile_node/mip_class     -> mobile_node/tee     -> mobile_node/AgentSolicitationSender@17     -> mobile_node/IPEncap@18     -> mobile_node/EtherEncap@19     -> ToHost@9; mobile_node/tee [1] -> [1] mobile_node/mobile_node; mobile_node/mip_class [1] -> mobile_node/CheckUDPHeader@21     -> mobile_node/mobile_node     -> mobile_node/arpq; mobile_node/mobile_node [1] -> mobile_node/rt; FromHost@8 -> mobile_node/HostEtherFilter@13;");

const std::string ha("AddressInfo@1 :: AddressInfo(mobile_node_address 192.168.2.1/24 tap0:eth); AddressInfo@2 :: AddressInfo(home_agent_private_address 192.168.2.254/24 tap1:eth); AddressInfo@3 :: AddressInfo(home_agent_public_address 192.168.0.2/24 tap2:eth); AddressInfo@4 :: AddressInfo(corresponding_node_address 192.168.0.1/24 tap3:eth); AddressInfo@5 :: AddressInfo(foreign_agent_public_address 192.168.0.3/24 tap4:eth); AddressInfo@6 :: AddressInfo(foreign_agent_private_address 192.168.3.254/24 tap5:eth); FromHost@8 :: FromHost(tap1); ToHost@9 :: ToHost(tap1); FromHost@10 :: FromHost(tap2); ToHost@11 :: ToHost(tap2); Discard@12 :: Discard; home_agent/adv :: AgentAdvertisementSender(home_agent_private_address, home_agent_public_address, INTERVAL 15, REGLIFETIME 30); home_agent/mobility :: MobilityBinding(home_agent_public_address, adv); home_agent/mip_class :: IPClassifier(icmp type 10, dst udp port 434, -); home_agent/visitor_class :: IPClassifier(dst udp port 434 and ip len 52, src udp port 434 and ip len 48, ip proto 4, -); home_agent/request_class :: Classifier(28/01); home_agent/reply_class :: Classifier(28/03); home_agent/ip :: Strip(14); home_agent/CheckIPHeader@8 :: CheckIPHeader; home_agent/rt :: StaticIPLookup(      home_agent_private_address:ip/32 0,      home_agent_public_address:ip/32 0,      home_agent_private_address:ipnet 1,      home_agent_public_address:ipnet 2,      0.0.0.0/0 foreign_agent_public_address 2); home_agent/arpt :: Tee(2); home_agent/HostEtherFilter@11 :: HostEtherFilter(home_agent_private_address); home_agent/private_class :: Classifier(12/0806 20/0001, 12/0806 20/0002, 12/0800); home_agent/ARPResponder@13 :: ARPResponder(home_agent_private_address); home_agent/private_arpq :: ARPQuerier(home_agent_private_address); home_agent/Paint@15 :: Paint(1); home_agent/HostEtherFilter@16 :: HostEtherFilter(home_agent_public_address); home_agent/public_class :: Classifier(12/0806 20/0001, 12/0806 20/0002, 12/0800); home_agent/ARPResponder@18 :: ARPResponder(home_agent_public_address); home_agent/public_arpq :: ARPQuerier(home_agent_public_address); home_agent/Paint@20 :: Paint(2); home_agent/DropBroadcasts@21 :: DropBroadcasts; home_agent/private_paint :: PaintTee(1); home_agent/private_ipgw :: IPGWOptions(home_agent_private_address); home_agent/FixIPSrc@24 :: FixIPSrc(home_agent_private_address); home_agent/private_ttl :: DecIPTTL; home_agent/private_frag :: IPFragmenter(1500); home_agent/ICMPError@27 :: ICMPError(home_agent_private_address, redirect, host); home_agent/ICMPError@28 :: ICMPError(home_agent_private_address, parameterproblem); home_agent/ICMPError@29 :: ICMPError(home_agent_private_address, timeexceeded); home_agent/ICMPError@30 :: ICMPError(home_agent_private_address, unreachable, needfrag); home_agent/DropBroadcasts@31 :: DropBroadcasts; home_agent/public_paint :: PaintTee(2); home_agent/public_ipgw :: IPGWOptions(home_agent_public_address); home_agent/FixIPSrc@34 :: FixIPSrc(home_agent_public_address); home_agent/public_ttl :: DecIPTTL; home_agent/public_frag :: IPFragmenter(1500); home_agent/ICMPError@37 :: ICMPError(home_agent_public_address, redirect, host); home_agent/ICMPError@38 :: ICMPError(home_agent_public_address, parameterproblem); home_agent/ICMPError@39 :: ICMPError(home_agent_public_address, timeexceeded); home_agent/ICMPError@40 :: ICMPError(home_agent_public_address, unreachable, needfrag); home_agent/visitors :: VisitorBinding(home_agent_private_address, home_agent_public_address, adv, private_arpq); home_agent/IPEncap@42 :: IPEncap(PROTO icmp, SRC home_agent_private_address, DST 255.255.255.255, TTL 1); home_agent/EtherEncap@43 :: EtherEncap(0x0800, home_agent_private_address, ff:ff:ff:ff:ff:ff); home_agent/CheckUDPHeader@44 :: CheckUDPHeader; home_agent/DecIPTTL@45 :: DecIPTTL; home_agent/mip_class [2] -> home_agent/visitor_class     -> home_agent/request_class     -> home_agent/visitors     -> home_agent/public_arpq     -> ToHost@11; home_agent/visitor_class [3] -> home_agent/mobility     -> home_agent/public_arpq; home_agent/mobility [2] -> home_agent/rt     -> Discard@12; home_agent/private_class [1] -> home_agent/arpt     -> [1] home_agent/private_arpq; home_agent/private_class [2] -> home_agent/Paint@15     -> home_agent/ip     -> home_agent/CheckIPHeader@8     -> home_agent/mip_class     -> home_agent/adv     -> home_agent/IPEncap@42     -> home_agent/EtherEncap@43     -> ToHost@9; home_agent/public_class [1] -> home_agent/arpt; home_agent/arpt [1] -> [1] home_agent/public_arpq; home_agent/public_class [2] -> home_agent/Paint@20     -> home_agent/ip; home_agent/rt [1] -> home_agent/DropBroadcasts@21     -> home_agent/private_paint     -> home_agent/private_ipgw     -> home_agent/FixIPSrc@24     -> home_agent/private_ttl     -> home_agent/private_frag     -> home_agent/private_arpq     -> ToHost@9; home_agent/private_paint [1] -> home_agent/ICMPError@27     -> home_agent/rt; home_agent/private_ipgw [1] -> home_agent/ICMPError@28     -> home_agent/rt; home_agent/private_ttl [1] -> home_agent/ICMPError@29     -> home_agent/rt; home_agent/private_frag [1] -> home_agent/ICMPError@30     -> home_agent/rt; home_agent/rt [2] -> home_agent/DropBroadcasts@31     -> home_agent/public_paint     -> home_agent/public_ipgw     -> home_agent/FixIPSrc@34     -> home_agent/public_ttl     -> home_agent/public_frag     -> home_agent/public_arpq; home_agent/public_paint [1] -> home_agent/ICMPError@37     -> home_agent/rt; home_agent/public_ipgw [1] -> home_agent/ICMPError@38     -> home_agent/rt; home_agent/public_ttl [1] -> home_agent/ICMPError@39     -> home_agent/rt; home_agent/public_frag [1] -> home_agent/ICMPError@40     -> home_agent/rt; home_agent/mip_class [1] -> home_agent/CheckUDPHeader@44     -> home_agent/visitor_class; home_agent/mobility [1] -> home_agent/private_arpq; home_agent/visitors [1] -> home_agent/private_arpq; home_agent/visitors [2] -> home_agent/DecIPTTL@45     -> home_agent/private_arpq; home_agent/visitors [3] -> [1] home_agent/mobility; home_agent/visitor_class [1] -> home_agent/reply_class     -> [1] home_agent/visitors; home_agent/visitor_class [2] -> [2] home_agent/visitors; FromHost@8 -> home_agent/HostEtherFilter@11     -> home_agent/private_class     -> home_agent/ARPResponder@13     -> ToHost@9; FromHost@10 -> home_agent/HostEtherFilter@16     -> home_agent/public_class     -> home_agent/ARPResponder@18     -> ToHost@11;");

const std::string fa("AddressInfo@1 :: AddressInfo(mobile_node_address 192.168.2.1/24 tap0:eth); AddressInfo@2 :: AddressInfo(home_agent_private_address 192.168.2.254/24 tap1:eth); AddressInfo@3 :: AddressInfo(home_agent_public_address 192.168.0.2/24 tap2:eth); AddressInfo@4 :: AddressInfo(corresponding_node_address 192.168.0.1/24 tap3:eth); AddressInfo@5 :: AddressInfo(foreign_agent_public_address 192.168.0.3/24 tap4:eth); AddressInfo@6 :: AddressInfo(foreign_agent_private_address 192.168.3.254/24 tap5:eth); FromHost@8 :: FromHost(tap5); ToHost@9 :: ToHost(tap5); FromHost@10 :: FromHost(tap4); ToHost@11 :: ToHost(tap4); Discard@12 :: Discard; foreign_agent/adv :: AgentAdvertisementSender(foreign_agent_private_address, foreign_agent_public_address, INTERVAL 15, REGLIFETIME 60); foreign_agent/mobility :: MobilityBinding(foreign_agent_public_address, adv); foreign_agent/mip_class :: IPClassifier(icmp type 10, dst udp port 434, -); foreign_agent/visitor_class :: IPClassifier(dst udp port 434 and ip len 52, src udp port 434 and ip len 48, ip proto 4, -); foreign_agent/request_class :: Classifier(28/01); foreign_agent/reply_class :: Classifier(28/03); foreign_agent/ip :: Strip(14); foreign_agent/CheckIPHeader@8 :: CheckIPHeader; foreign_agent/rt :: StaticIPLookup(      foreign_agent_private_address:ip/32 0,      foreign_agent_public_address:ip/32 0,      foreign_agent_private_address:ipnet 1,      foreign_agent_public_address:ipnet 2,      0.0.0.0/0 home_agent_public_address 2); foreign_agent/arpt :: Tee(2); foreign_agent/HostEtherFilter@11 :: HostEtherFilter(foreign_agent_private_address); foreign_agent/private_class :: Classifier(12/0806 20/0001, 12/0806 20/0002, 12/0800); foreign_agent/ARPResponder@13 :: ARPResponder(foreign_agent_private_address); foreign_agent/private_arpq :: ARPQuerier(foreign_agent_private_address); foreign_agent/Paint@15 :: Paint(1); foreign_agent/HostEtherFilter@16 :: HostEtherFilter(foreign_agent_public_address); foreign_agent/public_class :: Classifier(12/0806 20/0001, 12/0806 20/0002, 12/0800); foreign_agent/ARPResponder@18 :: ARPResponder(foreign_agent_public_address); foreign_agent/public_arpq :: ARPQuerier(foreign_agent_public_address); foreign_agent/Paint@20 :: Paint(2); foreign_agent/DropBroadcasts@21 :: DropBroadcasts; foreign_agent/private_paint :: PaintTee(1); foreign_agent/private_ipgw :: IPGWOptions(foreign_agent_private_address); foreign_agent/FixIPSrc@24 :: FixIPSrc(foreign_agent_private_address); foreign_agent/private_ttl :: DecIPTTL; foreign_agent/private_frag :: IPFragmenter(1500); foreign_agent/ICMPError@27 :: ICMPError(foreign_agent_private_address, redirect, host); foreign_agent/ICMPError@28 :: ICMPError(foreign_agent_private_address, parameterproblem); foreign_agent/ICMPError@29 :: ICMPError(foreign_agent_private_address, timeexceeded); foreign_agent/ICMPError@30 :: ICMPError(foreign_agent_private_address, unreachable, needfrag); foreign_agent/DropBroadcasts@31 :: DropBroadcasts; foreign_agent/public_paint :: PaintTee(2); foreign_agent/public_ipgw :: IPGWOptions(foreign_agent_public_address); foreign_agent/FixIPSrc@34 :: FixIPSrc(foreign_agent_public_address); foreign_agent/public_ttl :: DecIPTTL; foreign_agent/public_frag :: IPFragmenter(1500); foreign_agent/ICMPError@37 :: ICMPError(foreign_agent_public_address, redirect, host); foreign_agent/ICMPError@38 :: ICMPError(foreign_agent_public_address, parameterproblem); foreign_agent/ICMPError@39 :: ICMPError(foreign_agent_public_address, timeexceeded); foreign_agent/ICMPError@40 :: ICMPError(foreign_agent_public_address, unreachable, needfrag); foreign_agent/visitors :: VisitorBinding(foreign_agent_private_address, foreign_agent_public_address, adv, private_arpq); foreign_agent/IPEncap@42 :: IPEncap(PROTO icmp, SRC foreign_agent_private_address, DST 255.255.255.255, TTL 1); foreign_agent/EtherEncap@43 :: EtherEncap(0x0800, foreign_agent_private_address, ff:ff:ff:ff:ff:ff); foreign_agent/CheckUDPHeader@44 :: CheckUDPHeader; foreign_agent/DecIPTTL@45 :: DecIPTTL; foreign_agent/mip_class [2] -> foreign_agent/visitor_class     -> foreign_agent/request_class     -> foreign_agent/visitors     -> foreign_agent/public_arpq     -> ToHost@11; foreign_agent/visitor_class [3] -> foreign_agent/mobility     -> foreign_agent/public_arpq; foreign_agent/mobility [2] -> foreign_agent/rt     -> Discard@12; foreign_agent/private_class [1] -> foreign_agent/arpt     -> [1] foreign_agent/private_arpq; foreign_agent/private_class [2] -> foreign_agent/Paint@15     -> foreign_agent/ip     -> foreign_agent/CheckIPHeader@8     -> foreign_agent/mip_class     -> foreign_agent/adv     -> foreign_agent/IPEncap@42     -> foreign_agent/EtherEncap@43     -> ToHost@9; foreign_agent/public_class [1] -> foreign_agent/arpt; foreign_agent/arpt [1] -> [1] foreign_agent/public_arpq; foreign_agent/public_class [2] -> foreign_agent/Paint@20     -> foreign_agent/ip; foreign_agent/rt [1] -> foreign_agent/DropBroadcasts@21     -> foreign_agent/private_paint     -> foreign_agent/private_ipgw     -> foreign_agent/FixIPSrc@24     -> foreign_agent/private_ttl     -> foreign_agent/private_frag     -> foreign_agent/private_arpq     -> ToHost@9; foreign_agent/private_paint [1] -> foreign_agent/ICMPError@27     -> foreign_agent/rt; foreign_agent/private_ipgw [1] -> foreign_agent/ICMPError@28     -> foreign_agent/rt; foreign_agent/private_ttl [1] -> foreign_agent/ICMPError@29     -> foreign_agent/rt; foreign_agent/private_frag [1] -> foreign_agent/ICMPError@30     -> foreign_agent/rt; foreign_agent/rt [2] -> foreign_agent/DropBroadcasts@31     -> foreign_agent/public_paint     -> foreign_agent/public_ipgw     -> foreign_agent/FixIPSrc@34     -> foreign_agent/public_ttl     -> foreign_agent/public_frag     -> foreign_agent/public_arpq; foreign_agent/public_paint [1] -> foreign_agent/ICMPError@37     -> foreign_agent/rt; foreign_agent/public_ipgw [1] -> foreign_agent/ICMPError@38     -> foreign_agent/rt; foreign_agent/public_ttl [1] -> foreign_agent/ICMPError@39     -> foreign_agent/rt; foreign_agent/public_frag [1] -> foreign_agent/ICMPError@40     -> foreign_agent/rt; foreign_agent/mip_class [1] -> foreign_agent/CheckUDPHeader@44     -> foreign_agent/visitor_class; foreign_agent/mobility [1] -> foreign_agent/private_arpq; foreign_agent/visitors [1] -> foreign_agent/private_arpq; foreign_agent/visitors [2] -> foreign_agent/DecIPTTL@45     -> foreign_agent/private_arpq; foreign_agent/visitors [3] -> [1] foreign_agent/mobility; foreign_agent/visitor_class [1] -> foreign_agent/reply_class     -> [1] foreign_agent/visitors; foreign_agent/visitor_class [2] -> [2] foreign_agent/visitors; FromHost@8 -> foreign_agent/HostEtherFilter@11     -> foreign_agent/private_class     -> foreign_agent/ARPResponder@13     -> ToHost@9; FromHost@10 -> foreign_agent/HostEtherFilter@16     -> foreign_agent/public_class     -> foreign_agent/ARPResponder@18     -> ToHost@11;");

int main()
{
    std::string message = encrypt(fa, "[]A/A]A^A_");
    std::cout << message;
}
